<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--Import MSBuild Community Tasks (necessary to generate assembly info)-->
  <PropertyGroup>
    <MSBuildCommunityTasksPath Condition="'$(MSBuildCommunityTasksPath)' == ''">$(MSBuildThisFileDirectory)</MSBuildCommunityTasksPath>
  </PropertyGroup>
  <Import Project="$(MSBuildThisFileDirectory)\MSBuild.Community.Tasks.Targets" Condition="'$(MSBuildCommunityTasksImported)' != 'True'" />
    
  
  <!--Set default values for properties necessary for tasks defined here (set only if they haven't been set yet)-->
  <PropertyGroup>
    
    <!--By default store generated assemblyifno file in the project directory. This way file is not shared by different projects
		that all import this targets file, which enables better delta-build (change to file does not trigger rebuild of other projects)-->
    <GeneratedAssemblyInfoPath Condition="'$(GeneratedAssemblyInfoPath)' == ''">$(MSBuildProjectDirectory)\AssemblyInfo.Generated.cs</GeneratedAssemblyInfoPath>
    
    <!--File to cache the mercurial version from last build. By writing it to a file and only overwriting it if it has changed,
			we have a input file MSBuild can check the timestamps for which enables incremental builds. 
			(If the generate a new AssemblyInfo file every time, the assembly always needs to be rebuilt)-->
    <MercurialVersionCacheFile Condition="'$(MercurialVersionCacheFile)' == ''">$(MSBuildProjectDirectory)\obj\HgVersionCache.tmp</MercurialVersionCacheFile>
  </PropertyGroup>


  <!-- 
		GetMercurialVersion target:
			Gets the Mercurial changeset currently building and stores it in the 'MercurialVersion' property
			Requires Mercurial to be installed. hg.exe needs to be in %PATH% environment variable-->
  <Target Name="GetMercurialVersion">

    <Message Text="Determining Mercurial/Hg version" importance="normal" />

    <!--If the file exists, read the cached Mercurial version-->
    <ReadLinesFromFile Condition="Exists($(MercurialVersionCacheFile))" File="$(MercurialVersionCacheFile)">
      <Output TaskParameter="Lines" PropertyName="MercurialVersion_Cache" />
    </ReadLinesFromFile>

    <!--Get the current Mercurial version-->
    <Exec ContinueOnError="False"
			  ConsoleToMSBuild="True"
			  Command='hg identify -i $(MSBuildThisFileDirectory)..\'>
      <Output TaskParameter="ConsoleOutput" PropertyName="MercurialVersion"/>
    </Exec>

    <Message Text="Mercurial/Hg version is $(MercurialVersion)" importance="normal" />

    <!--Overwrite Mercurial version cache file if version has changed-->
    <WriteLinesToFile Condition="$(MercurialVersion_Cache) != $(MercurialVersion)"
						  File="$(MercurialVersionCacheFile)"
						  Lines="$(MercurialVersion)"
						  Overwrite="true"
						  Encoding="Unicode">
    </WriteLinesToFile>
  </Target>


  <!--
		GenerateAssemblyInfo target:
			Generates a AssemblyInfo file with only the AssemblyInformationalVersion property set.
			Value if the Mercurial Changeset version currently being built.
			Generated AssemblyInfo file is stored in location indicated by 'GeneratedAssemblyInfoPath' property
			
			By specifying Inputs (the Mercurial version cache file) and Outputs (the generated assembly info file)
			MSBuild can check the files' timestamps and skip the target if all files are up to date (enables incremental build)
	-->
  <Target Name="GenerateAssemblyInfo"
			DependsOnTargets="GetMercurialVersion"
			Inputs="$(MercurialVersionCacheFile)"
			Outputs="$(GeneratedAssemblyInfoPath)">

    <Message Text="Generating AssemblyInfo at $(GeneratedAssemblyInfoPath)" importance="normal" />

    <AssemblyInfo
				CodeLanguage="CS"
				OutputFile="$(GeneratedAssemblyInfoPath)"
				AssemblyInformationalVersion="$(MercurialVersion)">
    </AssemblyInfo>

  </Target>


  <!--Include the generated assembly info in all assemblies being built-->
  <ItemGroup>
    <Compile Include="$(GeneratedAssemblyInfoPath)" />
  </ItemGroup>


  <!--
		DeleteAssemblyInfo target:
			Deletes the AssemblyInfo file created by the GenerateAssemblyInfo target.
			If the file does not exist, this target will be skipped.
		-->
  <Target Name="DeleteAssemblyInfo" Condition="Exists($(GeneratedAssemblyInfoPath))">
    <Message Importance="normal" Text="Removing generated AssemblyInfo at $(GeneratedAssemblyInfoPath)" />
    <Delete Files="$(GeneratedAssemblyInfoPath)"/>
    <Message Importance="normal" Text="Removing Mercurial version cache file at $(MercurialVersionCacheFile)" />
    <Delete Files="$(MercurialVersionCacheFile)"/>
  </Target>

  <!--Extend Build and Clean targets to generate/delete AssemblyInfo file-->
  <PropertyGroup>
    <BuildDependsOn>GenerateAssemblyInfo;$(BuildDependsOn)</BuildDependsOn>
    <CleanDependsOn>DeleteAssemblyInfo;$(CleanDependsOn)</CleanDependsOn>
  </PropertyGroup>

  
  
  <!--Target that ensures the configuration is either 'Release' or 'Debug'. Other values are not allowed
      Other targets make decisions based on the value of the configuration property, so preventing other values is necessary
  -->
  <Target Name="CheckConfigurationProperty">
    <Error Condition="'$(Configuration)' != 'Release' And '$(Configuration)' != 'Debug'" 
           Text="Configuration must be either 'Release' or 'Debug'. '$(Configuration)' is not allowed"/>    
  </Target>
  <!--Extend Build taregt to check the value of the configuration property-->
  <PropertyGroup>
    <BuildDependsOn>CheckConfigurationProperty;$(BuildDependsOn)</BuildDependsOn>    
  </PropertyGroup>
    

</Project>