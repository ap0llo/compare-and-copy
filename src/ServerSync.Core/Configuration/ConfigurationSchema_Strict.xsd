<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="ConfigurationSchema"
    elementFormDefault="qualified"
    targetNamespace="http://grynwald.net/schemas/2014/ServerSync/v1/Configuration/"
    xmlns="http://grynwald.net/schemas/2014/ServerSync/v1/Configuration/"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
>

  <!--Root element type-->
  <xs:complexType name="typeSyncConfiguration">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="left" type="typeSyncFolderDefinition" />
      <xs:element name="right" type="typeSyncFolderDefinition" />
      <xs:element name="timeStampMargin" type="typeTimespan" />            
      <xs:element name="filter" type="typeFilter" />
      <xs:element name="include" type="typeInclude" />
      <xs:element name="transferLocation" type="typeTransferLocation" />
      <xs:element name="actions" type="typeActionList" />
    </xs:choice> 
  </xs:complexType>

  <!--Global Elements-->
   
  <!--Transfer Location-->
  <xs:complexType name="typeTransferLocation">
    <xs:sequence>
      <xs:element name="maximumSize" type="typeByteSize" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="path" type="xs:string" use="required" />
  </xs:complexType>

  <!--Include-->  
  <xs:complexType name="typeInclude">
    <xs:attribute name="path" type="xs:string" use="required" />
  </xs:complexType>

  <!--Timespan -->
  <xs:complexType name="typeTimespan">
    <xs:attribute name="h" type="xs:unsignedInt" />
    <xs:attribute name="m" type="xs:unsignedInt" />
    <xs:attribute name="s" type="xs:unsignedInt" />
    <xs:attribute name="ms" type="xs:unsignedInt" />
  </xs:complexType>

  <!--SyncFolder definition -->
  <xs:complexType name="typeSyncFolderDefinition">
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="rootPath" type="xs:string" use="required" />
  </xs:complexType>

  <!--Action List-->
  <xs:complexType name="typeActionList">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="compare" type="typeCompareAction" />
      <xs:element name="export"  type="typeImportExportAction" />
      <xs:element name="import"  type="typeImportExportAction" />
      <xs:element name="readSyncState"  type="typeReadSyncStateAction" />
      <xs:element name="writeSyncState" type="typeWriteSyncStateAction" />
      <xs:element name="applyFilter" type="typeApplyFilterAction" />
      <xs:element name="copy" type="typeIOAction" />
      <xs:element name="acquireLock" type="typeAcquireLockAction" />
      <xs:element name="releaseLock" type="typeReleaseLockAction" />
      <xs:element name="sleep" type="typeSleepAction" />
    </xs:choice>
  </xs:complexType>
  
  <!-- Actions -->  
  <xs:complexType name="typeCompareAction">
    <xs:attribute name="enable" type="xs:boolean" />
    <xs:attribute name="inputFilter" type="xs:string" />
  </xs:complexType>

  <xs:complexType name="typeApplyFilterAction">
    <xs:attribute name="enable" type="xs:boolean" />
    <xs:attribute name="inputFilter" type="xs:string" use="optional" />
  </xs:complexType>

  <xs:complexType name="typeIOAction">
    <xs:attribute name="enable" type="xs:boolean" />
    <xs:attribute name="inputFilter" type="xs:string" />
    <xs:attribute name="syncFolder" type="typeSyncFolder" />
  </xs:complexType>

  <xs:complexType name="typeImportExportAction" >
    <xs:attribute name="enable" type="xs:boolean" />
    <xs:attribute name="inputFilter" type="xs:string" />
    <xs:attribute name="syncFolder" type="typeSyncFolder" />
    <xs:attribute name="transferLocationName" type="xs:string" use="required" />
    <xs:attribute name="transferLocationSubPath" type="xs:string" />
  </xs:complexType>


  <xs:complexType name="typeReadSyncStateAction">
    <xs:attribute name="enable" type="xs:boolean" use="required" />
    <xs:attribute name="fileName" type="xs:string" use="required" />
  </xs:complexType>
  
  <xs:complexType name="typeWriteSyncStateAction">
    <xs:attribute name="enable" type="xs:boolean" use="required" />
    <xs:attribute name="inputFilter" type="xs:string" />
    <xs:attribute name="fileName" type="xs:string" use="required" />
  </xs:complexType>

  <xs:complexType name="typeSleepAction">
    <xs:sequence>
      <xs:element name="timeout" type="typeTimespan" minOccurs="1" maxOccurs="1" />
    </xs:sequence>
    <xs:attribute name="enable" type="xs:boolean" use="required" />
  </xs:complexType>
  
  <xs:complexType name="typeAcquireLockAction">
    <xs:sequence>
      <xs:element name="timeout" type="typeTimespan" minOccurs="0" maxOccurs="1" />
    </xs:sequence>
    <xs:attribute name="enable" type="xs:boolean" use="required" />
    <xs:attribute name="lockFile" type="xs:string" use="required" />
  </xs:complexType>

  <xs:complexType name="typeReleaseLockAction">
    <xs:attribute name="enable" type="xs:boolean" use="required" />
    <xs:attribute name="lockFile" type="xs:string" use="required" />
  </xs:complexType>


  <!--CompareState-->
  <xs:simpleType name="typeCompareState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="MissingLeft" />
      <xs:enumeration value="MissingRight" />
      <xs:enumeration value="Conflict" />      
    </xs:restriction>
  </xs:simpleType>
  
  <!--TransferState-->
  <xs:simpleType name="typeTransferState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="InTransferToLeft" />
      <xs:enumeration value="InTransferToRight" />
    </xs:restriction>
  </xs:simpleType>

  <!--SyncFolder (Enum type)-->
  <xs:simpleType name="typeSyncFolder">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Left" />
      <xs:enumeration value="left" />
      <xs:enumeration value="Right" />
      <xs:enumeration value="right" />
    </xs:restriction>
  </xs:simpleType>
  
  <!--Filters-->
  
  <!--Filter definition Type-->
    
  <xs:complexType name="typeFilter">
    <xs:choice>
      <xs:choice minOccurs="1" maxOccurs="1">
        <xs:element name="regex" type="typeRegexRule"  />
        <xs:element name="compareState" type="typeCompareStateElement" />
        <xs:element name="transferState" type="typeTransferStateElement" />
        <xs:element name="microscopeQuery" type="typeMicroscopeQuery" />
        <xs:element name="and" type="typeFilterExpressionList" />
        <xs:element name="or" type="typeFilterExpressionList" />
        <xs:element name="not" type="typeFilterExpression" />
      </xs:choice>
    </xs:choice>    
    <xs:attribute name="name" type="xs:string" use="required" />
  </xs:complexType>

  <!--Filter element list-->
  <xs:complexType name="typeFilterExpressionList">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="regex" type="typeRegexRule"  />
      <xs:element name="compareState" type="typeCompareStateElement" />
      <xs:element name="transferState" type="typeTransferStateElement" />
      <xs:element name="microscopeQuery" type="typeMicroscopeQuery" />
      <xs:element name="and" type="typeFilterExpressionList" />
      <xs:element name="or" type="typeFilterExpressionList" />
      <xs:element name="not" type="typeFilterExpression" />
    </xs:choice>
  </xs:complexType>
  
  <!--Filter expression types-->
  <xs:complexType name="typeFilterExpression">
    <xs:choice minOccurs="1" maxOccurs="1">
      <xs:element name="regex" type="typeRegexRule"  />
      <xs:element name="compareState" type="typeCompareStateElement" />
      <xs:element name="transferState" type="typeTransferStateElement" />
      <xs:element name="microscopeQuery" type="typeMicroscopeQuery" />
      <xs:element name="and" type="typeFilterExpressionList" />
      <xs:element name="or" type="typeFilterExpressionList" />
      <xs:element name="not" type="typeFilterExpression" />
    </xs:choice>
  </xs:complexType>
  
  <xs:complexType name="typeCompareStateElement">
    <xs:attribute name="value" type="typeCompareState" use="required" />
  </xs:complexType>

  <xs:complexType name="typeTransferStateElement">
    <xs:attribute name="value" type="typeTransferState" use="required" />
  </xs:complexType>
  
  <xs:complexType name="typeRegexRule">
    <xs:attribute name="pattern" type="xs:string" use="required" />
  </xs:complexType>
  
  <xs:complexType name="typeMicroscopeQuery">
    <xs:attribute name="query" type="xs:string" use="required" />
  </xs:complexType>

  <!--ByteSize type-->
  <!--
    Type to specify data size. Size is specified in either TB, GB, MB, KB or B
    If more than one attribute is used, the specified size is the sum of the individual attributes
  -->
  <xs:complexType name="typeByteSize">
    <xs:attribute name="tb" type="xs:int" use="optional" />
    <xs:attribute name="gb" type="xs:int" use="optional" />
    <xs:attribute name="mb" type="xs:int" use="optional" />
    <xs:attribute name="kb" type="xs:int" use="optional" />
    <xs:attribute name="b" type="xs:int" use="optional" />
  </xs:complexType>
  

  <!--Root Element-->
  <xs:element name="syncConfiguration" type="typeSyncConfiguration" />

</xs:schema>
